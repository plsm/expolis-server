#!/usr/bin/env python3

import argparse
import datetime
import os.path
import sys

from psycopg2 import IntegrityError

import data
from database import Database


__DATETIME_FORMAT_CSV__ = '%Y-%m-%dT%H:%M:%S'
__DATETIME_FORMAT_SQL__ = '%Y-%m-%d %H:%M:%S.%f'


class Args:
    def __init__ (self):
        parser = argparse.ArgumentParser (
            description='Insert the data in a CSV file generated by a sensor node into the ExpoLIS database'
        )
        parser.add_argument (
            'sensor_node',
            metavar='ID',
            type=int,
            help='Unique integer that identifies the sensor node',
        )
        parser.add_argument (
            'csv_file',
            metavar='FILENAME',
            type=str,
            help='CSV file to analyse',
        )
        args = parser.parse_args ()
        self.sensor_node_id = args.sensor_node  # type: int
        self.csv_file = args.csv_file           # type: str


class Row:
    def __init__ (self, line):
        row = line.replace (',', '.')
        row = row.split (' ')
        self.sample = int (row [0])
        self.when = datetime.datetime.strptime (row [1], __DATETIME_FORMAT_CSV__)\
            .strftime (__DATETIME_FORMAT_SQL__)
        self.latitude = row [2]
        self.longitude = row [3]
        self.gps_error = row [4]
        self.sensor_data = {
            'co_1': ('real', row [5]),
            'co_2': ('real', row [6]),
            'no2_1': ('real', row [7]),
            'no2_2': ('real', row [8]),
            'pm1': ('real', row [9]),
            'pm25': ('real', row [10]),
            'pm10': ('real', row [11]),
            'pm1f': ('real', row [12]),
            'pm25f': ('real', row [13]),
            'pm10f': ('real', row [14]),
            'temperature': ('real', row [15]),
            'pressure': ('real', row [16]),
            'humidity': ('real', row [17]),
            'kp': ('real', row [19]),
            'kd': ('real', row [20]),
        }


def main ():
    args = Args ()
    if not os.path.exists (args.csv_file):
        print ('File {} does not exist!'.format (args.csv_file))
        sys.exit (1)
    if not os.path.isfile (args.csv_file):
        print ('File {} is not a regular file!'.format (args.csv_file))
        sys.exit (2)
    data.load_data ()
    db = Database ()
    try:
        with open (args.csv_file, 'rt') as fd:
            process_file (args.sensor_node_id, args.csv_file, db, fd)
    except OSError:
        print ('Could not open file {}!.'.format (args.csv_file))
        sys.exit (3)


def process_file (sensor_node_id: int, csv_file_name: str, db: Database, fd):
    # CSV files generated by sensor nodes have two header rows
    fd.readline ()
    fd.readline ()
    number_rows = 0
    number_errors = 0
    for line in fd:
        number_rows += 1
        row = Row (line)
        print ('\rProcessing line {} row ID {} ... '.format (
            number_rows,
            row.sample,
        ), end='')
        sys.stdout.flush ()
        sql_command = '''
        SELECT * FROM insert_measurements (
            CAST (%s AS INTEGER),
            CAST (%s AS TIMESTAMP),
            CAST (%s AS REAL),
            CAST (%s AS DOUBLE PRECISION),
            CAST (%s AS DOUBLE PRECISION)'''
        sql_args = [
            sensor_node_id,
            row.when,
            row.gps_error,
            row.longitude,
            row.latitude,
        ]
        for sql_identifier in row.sensor_data:
            sql_type, value = row.sensor_data [sql_identifier]
            sql_command += ', {} => CAST (%s AS {})'.format (sql_identifier, sql_type)
            sql_args += [value]
        sql_command += ')'
        try:
            db.cursor.execute (sql_command, sql_args)
        except IntegrityError:
            print ('\nData of message id {} already exists in database'.format (row.sample))
            number_errors += 1
    print ('\n\n{} rows of file {} were processed.\n{}'.format (
        number_rows,
        csv_file_name,
        'No errors were found.'
        if number_errors == 0 else
        '{} lines generated errors!'.format (number_errors)
    ))


if __name__ == '__main__':
    main ()
