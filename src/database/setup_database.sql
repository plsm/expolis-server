-- SQL DDL statements to create the core tables for the Expolis data server.
-- The tables are the ones related to the buses and their lines, the sensor hardware and its specifications,
-- and the measurement table.
--
-- Pedro Mariano


-- Buses and their lines DDL statements

CREATE TABLE bus (
       ID SERIAL PRIMARY KEY,
       description TEXT NOT NULL,
       UNIQUE (description)
);
COMMENT ON TABLE bus IS
'The table bus contains information about the bus or other public transport used in the Expolis project. '
'The column description should be unique, for instance it could be license plate.  '
'Records in this table can also refer to abstract vehicles when using data from another project (see for instance the Zurich project).';


CREATE TABLE line_ (
       ID SERIAL PRIMARY KEY,
       number_ INTEGER NOT NULL,
       description TEXT NOT NULL,
       UNIQUE (description)
);
COMMENT ON TABLE line_ IS
'The table line contains information about the lines made by the buses used in the Expolis project.  '
'Both the columns number and description should uniquely describe the line.';


CREATE TABLE line_path (
       lineID INTEGER REFERENCES line_ (ID) ON DELETE CASCADE,
       path_ INTEGER NOT NULL,
       index_ INTEGER NOT NULL,
       long_lat GEOMETRY (POINT) NOT NULL,
       UNIQUE (lineID, path_, index_)
);
COMMENT ON TABLE line_path IS
'This table contains information about the paths of a line.  '
'We do not distinguish the direction the bus is supposed to go.  '
'The column path_ should be used to identify a path of a line.  '
'The column index_ should be used to identify a position where the bus passes through the path.';

CREATE INDEX line_path_position ON line_path USING GIST (long_lat);

CREATE TABLE bus_assignment (
       busID INTEGER REFERENCES bus (ID) ON DELETE CASCADE,
       lineID INTEGER REFERENCES line_ (ID) ON DELETE CASCADE,
       assigned TIMESTAMP DEFAULT (current_timestamp) NOT NULL,
       UNIQUE (busID, lineID, assigned)
);
COMMENT ON TABLE bus_assignment IS
'This table stores information of when a bus was assigned to a line. '
'We only store the date when the bus was assigned, as the bus may still be assigned to the last line.';


-- Sensor hardware specifications, and sensor node DDL statements

CREATE TABLE sensor_type (
       ID SERIAL PRIMARY KEY,
       description TEXT NOT NULL UNIQUE
);
COMMENT ON TABLE sensor_type IS
'This table correspond to an enumeration that contains the data type sensed by the sensors used in the Expolis project.  '
'It can also contain records that represent sensor data in data sets used to test the software developed during the project';

CREATE TABLE sensor_specifications (
       ID SERIAL PRIMARY KEY,
       product_description TEXT NOT NULL UNIQUE,
       typeID INTEGER REFERENCES sensor_type (ID) ON DELETE CASCADE,
       min_value NUMERIC NOT NULL,
       max_value NUMERIC NOT NULL,
       CHECK (min_value < max_value)
);
COMMENT ON TABLE sensor_specifications IS
'This table contains the description of sensors used in the Expolis project.  '
'The data stored in each record should contain a description of the manufacturer.  '
'We also store the minimum and maximum measured value, as this is useful when plotting graphs and computing a scale.';

CREATE TABLE node_sensors (
       ID SERIAL PRIMARY KEY,
       busID INTEGER REFERENCES bus (ID) ON DELETE CASCADE,
       serial_description TEXT NOT NULL UNIQUE,
       is_mobile BOOLEAN NOT NULL,
       deployed TIMESTAMP DEFAULT (current_timestamp) NOT NULL,
       mqtt_topic_number INTEGER NOT NULL UNIQUE,
       UNIQUE (busID, deployed)
);
COMMENT ON TABLE node_sensors IS
'Records in this table represent the hardware deployed in a bus.  '
'Each record represents a node of sensors.  '
'Information about the particular sensors in the hardware is stored in table sensor_hardware.';

CREATE TABLE sensor_hardware (
       ID SERIAL PRIMARY KEY,
       specsID INTEGER REFERENCES sensor_specifications (ID) ON DELETE CASCADE,
       nodeID INTEGER REFERENCES node_sensors (ID) ON DELETE CASCADE,
       serial_description TEXT NOT NULL UNIQUE
);
COMMENT ON TABLE sensor_hardware IS
'Records in this table represent a physical sensor in a node of sensors.';


-- Measurement table.
-- The DDL statements to create the other tables are generated by a python script, as it depends on the measured data.

CREATE TABLE measurement_properties (
       ID SERIAL PRIMARY KEY,
       nodeID INTEGER REFERENCES node_sensors (ID) ON DELETE CASCADE,
       when_ TIMESTAMP DEFAULT (current_timestamp) NOT NULL,
       gps_error REAL NOT NULL,
       longitude DOUBLE PRECISION  NOT NULL,
       latitude DOUBLE PRECISION NOT NULL,
       long_lat GEOMETRY (POINT) NOT NULL,
       UNIQUE (nodeID, when_, long_lat)
);


CREATE INDEX measurement_properties_position ON measurement_properties USING GIST (long_lat);
CREATE INDEX measurement_properties_timestamp ON measurement_properties (when_);


-- Subscriptions table

CREATE TABLE subscriptions (
    email TEXT PRIMARY KEY,
    salt TEXT NOT NULL,
    period INT CHECK (period = 1 or period = 2)
);

-- Function to insert sensor data measurement

CREATE FUNCTION insert_measurements (
    IN mqtt_topic INTEGER,
    IN date_time TIMESTAMP,
    IN gps_error REAL,
    IN longitude DOUBLE PRECISION,
    IN latitude DOUBLE PRECISION
) RETURNS void
LANGUAGE plpgsql
AS $$
DECLARE
    mpid integer;
    node_id integer;
BEGIN
    node_id := (SELECT ID FROM node_sensors WHERE mqtt_topic_number = mqtt_topic LIMIT 1);
    INSERT INTO
        measurement_properties (nodeID, when_, gps_error, longitude, latitude, long_lat)
    VALUES
        (node_id, date_time, gps_error, longitude, latitude, ST_SetSRID (ST_MakePoint (longitude, latitude), 4326));
END;
$$;

-- Functions to insert bus and line information

CREATE FUNCTION insert_bus (
    IN description TEXT
) RETURNS BIGINT
LANGUAGE sql
AS
$$
    INSERT INTO bus (description) VALUES (insert_bus.description);
    SELECT currval ('bus_ID_seq');
$$;


CREATE FUNCTION insert_node_sensors (
    IN bus_id INTEGER,
    IN serial_description TEXT,
    IN mqtt_topic_number INTEGER,
    IN deployed TIMESTAMP DEFAULT current_timestamp
) RETURNS BIGINT
LANGUAGE sql
AS
$$
    INSERT INTO node_sensors (busID, serial_description, deployed, mqtt_topic_number)
        VALUES (bus_id, serial_description, deployed, mqtt_topic_number);
    SELECT currval ('node_sensors_ID_seq');
$$;


CREATE FUNCTION insert_line (
    IN line_number INTEGER,
    IN line_description TEXT
) RETURNS BIGINT
LANGUAGE sql
AS
$$
    INSERT INTO line_ (number_, description)
        VALUES (line_number, line_description);
    SELECT currval ('line__ID_seq');
$$;


CREATE FUNCTION insert_line_path (
    IN line_id BIGINT,
    IN path INTEGER,
    IN index INTEGER,
    IN longitude DOUBLE PRECISION,
    IN latitude DOUBLE PRECISION
) RETURNS void
LANGUAGE sql
AS
$$
    INSERT INTO line_path (lineID, path_, index_, long_lat)
        VALUES (line_id, path, index, ST_SetSRID (ST_MakePoint (longitude, latitude), 4326))
$$;

-- Permissions

GRANT SELECT ON TABLE line_ TO expolis_app;
GRANT SELECT ON TABLE line_path TO expolis_app;
GRANT SELECT ON TABLE node_sensors TO expolis_app;
GRANT SELECT ON TABLE measurement_properties TO expolis_app;
GRANT SELECT ON TABLE measurement_properties TO expolis_php;
GRANT SELECT, INSERT, DELETE ON TABLE subscriptions TO expolis_php;
